import * as react from 'react';
import { BaseStorage } from './index.cjs';

type Setter<T> = ((v?: T, isHydrated?: boolean) => T) | T;
/**
 * isPublic: If true, the value will be synced with web API Storage
 */
type RawKey = string | {
    key: string;
    instance: BaseStorage;
};
/**
 * https://docs.plasmo.com/framework/storage
 * @param onInit  If it is a function, the returned value will be rendered and persisted. If it is a static value, it will only be rendered, not persisted
 * @returns
 */
declare const useStorage: <T = any>(rawKey: RawKey, onInit?: Setter<T>) => readonly [T, (setter: Setter<T>) => Promise<void>, {
    readonly setRenderValue: react.Dispatch<react.SetStateAction<T>>;
    readonly setStoreValue: (v?: T) => Promise<any>;
    readonly remove: () => void;
}];

export { RawKey, useStorage };
